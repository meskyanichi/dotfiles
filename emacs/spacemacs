;; -*- mode: emacs-lisp -*-

(defun dotspacemacs/layers ()
  (setq-default
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-configuration-layer-path '()
   dotspacemacs-configuration-layers
   '(
     yaml
     html
     markdown
     org
     emacs-lisp
     clojure
     javascript
     auto-completion
     syntax-checking
     git
     go
     (ruby :variables
           ruby-enable-enh-ruby-mode t
           ruby-version-manager 'chruby)
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     (spell-checking :variables
                     spell-checking-enable-by-default nil)
     )
   dotspacemacs-additional-packages
   '(
     pinentry
     git-gutter-fringe+
     vue-mode
     parinfer
     )
   dotspacemacs-excluded-packages '(smartparens linum)
   dotspacemacs-delete-orphan-packages t
   )
  )

(defun dotspacemacs/init ()
  (setq-default
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-timeout 5
   dotspacemacs-check-for-update t
   dotspacemacs-editing-style 'vim
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner 'official
   dotspacemacs-startup-lists '(projects recents bookmarks)
   dotspacemacs-startup-recent-list-size 10
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-themes '(spacemacs-light spacemacs-dark)
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Menlo"
                               :size 24
                               :weight normal
                               :width normal
                               :powerline-scale 1.3)
   dotspacemacs-leader-key "§"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-command-key ":"
   dotspacemacs-remap-Y-to-y$ t
   dotspacemacs-default-layout-name "Default"
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-max-rollback-slots 5
   dotspacemacs-use-ido nil
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-no-header nil
   dotspacemacs-helm-position 'bottom
   dotspacemacs-enable-paste-micro-state nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup t
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-smooth-scrolling t
   dotspacemacs-line-numbers t
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup 'all
   ))

(defun dotspacemacs/user-init ()
  (initLoadPaths)
  (initISpell)
  (initTemporaryDashAndAutothemerWorkAround)
  )

(defun dotspacemacs/user-config ()
  (configEmacs)
  (configFringe)
  (configPowerline)
  (configMx)
  (configMagit)
  (configNeotree)
  (configBuffer)
  (configCursor)
  (configProjectile)
  (configSearch)
  (configHippieExpand)
  (configEvilNerdCommenter)
  (configEyebrowse)
  (configGitGutter)
  (configMake)
  (configElm)
  (configSass)
  (configCrystal)
  (configShell)
  (configJavaScript)
  (configClojure)
  (configHtml)
  (configCss)
  (configFrame)
  (configWindow)
  (configFont)
  (configInsertMode)
  (configIndent)
  (configAlignment)
  (configMmmMode)
  (initPinentry)
  )

(defun initLoadPaths ()
  (add-to-list 'load-path "~/.dotfiles/emacs")
  )

(defun initISpell ()
  (setq ispell-personal-dictionary "~/.dictionary")
  )

(defun initPinentry ()
  (pinentry-start)
  )

(defun initTemporaryDashAndAutothemerWorkAround ()
  (load-file "~/.dotfiles/emacs/dash.el")
  (load-file "~/.dotfiles/emacs/autothemer.el")
  )

(defun configEmacs ()
  (setq vc-follow-symlinks t)
  )

(defun configFringe ()
  (setq-default left-fringe-width 15)
  (setq-default right-fringe-width 0)
  )

(defun configPowerline ()
  (setq auto-revert-check-vc-info t)
  (setq ns-use-srgb-colorspace nil)
  (setq powerline-default-separator 'slant)
  (spaceline-compile)
  )

(defun configMx ()
  (define-key evil-normal-state-map (kbd "_") 'helm-M-x)
  (define-key spacemacs-buffer-mode-map (kbd "_") 'helm-M-x)
  )

(defun configMagit()
  (define-key evil-normal-state-map (kbd "+") 'magit-status)
  )

(defun configNeotree ()
  (setq neo-theme 'nerd)
  (define-key evil-normal-state-map (kbd "To") 'neotree-find-project-root)
  (add-hook
   'neotree-mode-hook
   '(lambda ()
      (local-set-key (kbd "To") 'neotree-find-project-root)
      (local-set-key (kbd "o") 'neotree-enter)
      (local-set-key (kbd "<tab>") 'evil-window-next)
      ))
  )

(defun configBuffer ()
  (define-key evil-normal-state-map (kbd "s-<backspace>") 'helm-resume)
  (define-key evil-normal-state-map (kbd "<tab>") 'evil-window-next)
  (define-key evil-normal-state-map (kbd "s-b") 'helm-mini)
  (global-set-key (kbd "s-w") 'evil-window-delete)
  (global-set-key (kbd "s-q") 'evil-window-delete)
  )

(defun configCursor ()
  (indent-guide-global-mode)
)

(defun configProjectile ()
  (define-key evil-normal-state-map (kbd "s-f") 'helm-projectile-find-file)
  (global-set-key (kbd "s-p") 'helm-projectile-switch-project)
  )

(defun configSearch ()
  (define-key evil-normal-state-map (kbd "s-F") 'helm-projectile-ag)
  )

(defun configHippieExpand ()
  (define-key evil-insert-state-map (kbd "M-<tab>") 'hippie-expand)
  )

(defun configEvilNerdCommenter ()
  (define-key evil-normal-state-map (kbd ",ci") 'evilnc-comment-or-uncomment-lines)
  (define-key evil-visual-state-map (kbd ",ci") 'evilnc-comment-or-uncomment-lines)
  )

(defun configEyebrowse ()
  (global-set-key (kbd "s-§") 'eyebrowse-close-window-config)
  (global-set-key (kbd "s-1") 'eyebrowse-switch-to-window-config-1)
  (global-set-key (kbd "s-2") 'eyebrowse-switch-to-window-config-2)
  (global-set-key (kbd "s-3") 'eyebrowse-switch-to-window-config-3)
  (global-set-key (kbd "s-4") 'eyebrowse-switch-to-window-config-4)
  (global-set-key (kbd "s-5") 'eyebrowse-switch-to-window-config-5)
  (global-set-key (kbd "s-6") 'eyebrowse-switch-to-window-config-6)
  )

(defun configGitGutter ()
  (require 'git-gutter-fringe+)
  (global-git-gutter+-mode)
  )

(defun configMake ()
  (setq helm-make-named-buffer t)
  (add-hook
   'compilation-mode-hook
   '(lambda ()
      (local-set-key (kbd "<tab>") 'evil-window-next)
      ))
  )

(defun configElm ()
  (setq elm-format-on-save t)
  )

(defun configSass ()
  (add-hook
   'sass-mode-hook
   '(lambda ()
      (define-key evil-normal-state-local-map (kbd "<backspace>") 'evil-backward-char)))
  )

(defun configCrystal ()
  (autoload 'crystal-mode "crystal-mode" "Major mode for crystal files" t)
  (add-to-list 'auto-mode-alist '("\\.cr$" . crystal-mode))
  (add-to-list 'interpreter-mode-alist '("crystal" . crystal-mode))
  )

(defun configShell ()
  (setq sh-basic-offset 2)
  (setq sh-indentation 2)
  (define-key evil-normal-state-map (kbd "!") 'projectile-run-async-shell-command-in-root)
  (define-key evil-normal-state-map (kbd "-")
    '(lambda ()
       (interactive)
       (let (
             (currentbuf (get-buffer-window (current-buffer)))
             (newbuf     (generate-new-buffer-name "*shell*"))
             )
         (generate-new-buffer newbuf)
         (set-window-dedicated-p currentbuf nil)
         (set-window-buffer currentbuf newbuf)
         (shell newbuf)
         )
       ))
  )

(defun configJavaScript ()
  (setq-default js-indent-level 2)
  )

(defun configClojure ()
  (setq clojure-enable-linters t)
  (add-hook 'clojure-mode-hook 'parinfer-mode)
  (add-hook 'clojure-mode-hook
    (lambda ()
      (when (cider-connected-p)
        (add-hook 'before-save-hook 'cider-format-buffer nil 'local)))))

(defun configHtml ()
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  )

(defun configCss ()
  (setq css-indent-offset 2)
  (setq css-fontify-colors nil)
  )

(defun configFrame ()
  (global-set-key (kbd "<C-s-268632070>") 'toggle-frame-fullscreen)
  )

(defun configWindow ()
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-decrease-height)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-increase-height)
  )

(defun configFont ()
  (global-set-key (kbd "s-0") 'spacemacs/reset-font-size)
  (global-set-key (kbd "s-=") 'spacemacs/scale-up-font)
  (global-set-key (kbd "s--") 'spacemacs/scale-down-font)
  )

(defun configInsertMode ()
  (define-key evil-insert-state-map (kbd "M-@") 'writeEuroSymbol)
  )

(defun configIndent ()
  (setq go-tab-width 2)
  )

(defun configAlignment ()
  (define-key evil-visual-state-map (kbd "+") 'align-to-equals)
  )

(defun configMmmMode ()
  (add-hook
   'mmm-mode-hook
   (lambda ()
     (set-face-background 'mmm-default-submode-face nil)))
  )

(defun writeEuroSymbol ()
  (interactive)
  (insert "€")
  )

(defun align-to-equals (begin end)
  (interactive "r")
  (align-regexp begin end "\\(\\s-*\\)=" 1 1 ))

(defun forward-button ()
  (interactive)
  (evil-window-next 1))


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#0a0814" "#f2241f" "#67b11d" "#b1951d" "#4f97d7" "#a31db1" "#28def0" "#b2b2b2"])
 '(package-selected-packages
   (quote
    (vue-mode edit-indirect ssass-mode vue-html-mode pinentry transient lv parinfer clojure-snippets clj-refactor inflections edn paredit peg cider-eval-sexp-fu cider sesman queue parseedn clojure-mode parseclj a reformatter treepy graphql enh-ruby-mode dash yaml-mode xterm-color ws-butler winum which-key web-mode web-beautify volatile-highlights vi-tilde-fringe uuidgen use-package toml-mode toc-org tagedit spaceline powerline smeargle slim-mode shell-pop scss-mode sass-mode rvm ruby-tools ruby-test-mode rubocop rspec-mode robe restart-emacs rbenv rake rainbow-delimiters racer pug-mode psci purescript-mode psc-ide popwin persp-mode pcre2el paradox spinner orgit org-projectile org-category-capture org-present org-pomodoro alert log4e gntp org-mime org-download org-bullets open-junk-file ob-elixir org-plus-contrib neotree multi-term move-text mmm-mode minitest markdown-toc markdown-mode magit-gitflow macrostep lorem-ipsum livid-mode skewer-mode simple-httpd linum-relative link-hint less-css-mode js2-refactor multiple-cursors js2-mode js-doc indent-guide hydra hungry-delete htmlize hl-todo highlight-parentheses highlight-numbers parent-mode highlight-indentation helm-themes helm-swoop helm-projectile helm-mode-manager helm-make projectile helm-gitignore request helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag haml-mode google-translate golden-ratio go-guru go-eldoc gnuplot gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe+ fringe-helper git-gutter+ gh-md fuzzy flyspell-correct-helm flyspell-correct flycheck-rust flycheck-pos-tip pos-tip flycheck-mix flycheck-elm flycheck-credo flycheck flx-ido flx fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit magit git-commit ghub let-alist with-editor evil-lisp-state smartparens evil-indent-plus evil-iedit-state iedit evil-exchange evil-escape evil-ediff evil-args evil-anzu anzu evil goto-chg undo-tree eval-sexp-fu highlight eshell-z eshell-prompt-extras esh-help emmet-mode elm-mode elisp-slime-nav dumb-jump f dockerfile-mode docker json-mode tablist magit-popup docker-tramp json-snatcher json-reformat diminish define-word csv-mode company-web web-completion-data company-tern dash-functional tern company-statistics company-go go-mode column-enforce-mode coffee-mode clean-aindent-mode chruby cargo rust-mode bundler inf-ruby bind-map bind-key auto-yasnippet yasnippet auto-highlight-symbol auto-dictionary auto-compile packed alchemist s company elixir-mode pkg-info epl aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line helm avy helm-core async ac-ispell auto-complete popup gruvbox-theme))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
