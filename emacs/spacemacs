;; -*- mode: emacs-lisp -*-

(defun dotspacemacs/layers ()
  (setq-default
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-configuration-layer-path '()
   dotspacemacs-configuration-layers
   '(
     purescript
     csv
     git
     org
     dash
     auto-completion
     emacs-lisp
     markdown
     (ruby :variables ruby-version-manager 'chruby)
     rust
     elixir
     elm
     html
     go
     javascript
     yaml
     syntax-checking
     (spell-checking :variables
                     spell-checking-enable-by-default nil)
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     )
   dotspacemacs-additional-packages
   '(
     git-gutter-fringe+
     docker
     dockerfile-mode
     )
   dotspacemacs-excluded-packages '(smartparens)
   dotspacemacs-delete-orphan-packages t
   )
  )

(defun dotspacemacs/init ()
  (setq-default
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-timeout 5
   dotspacemacs-check-for-update t
   dotspacemacs-editing-style 'vim
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner 'official
   dotspacemacs-startup-lists '(projects recents bookmarks)
   dotspacemacs-startup-recent-list-size 10
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-themes '(junio)
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Fira Mono Medium for Powerline"
                               :size 16
                               :weight normal
                               :width normal
                               :powerline-scale 1.3)
   dotspacemacs-leader-key "`"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-command-key ":"
   dotspacemacs-remap-Y-to-y$ t
   dotspacemacs-default-layout-name "Default"
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-max-rollback-slots 5
   dotspacemacs-use-ido nil
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-no-header nil
   dotspacemacs-helm-position 'bottom
   dotspacemacs-enable-paste-micro-state nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup t
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-smooth-scrolling t
   dotspacemacs-line-numbers t
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup 'all
   ))

(defun dotspacemacs/user-init ()
  (initLoadPaths)
  (initDash)
  (initISpell)
  )

(defun dotspacemacs/user-config ()
  (configLinum)
  (configFringe)
  (configPowerline)
  (configMx)
  (configMagit)
  (configNeotree)
  (configBuffer)
  (configProjectile)
  (configSearch)
  (configHippieExpand)
  (configEvilNerdCommenter)
  (configEyebrowse)
  (configGitGutter)
  (configMake)
  (configDash)
  (configElm)
  (configSass)
  (configCrystal)
  (configShell)
  (configJavaScript)
  (configHtml)
  (configCss)
  (configVue)
  )

(defun initLoadPaths ()
  (add-to-list 'load-path "~/dotfiles/emacs")
  )

(defun initISpell ()
  (setq ispell-personal-dictionary "~/.dictionary")
  )

(defun configLinum ()
  (setq linum-format " %d ")
  )

(defun configFringe ()
  (setq-default left-fringe-width 15)
  (setq-default right-fringe-width 0)
  )

(defun configPowerline ()
  (setq auto-revert-check-vc-info t)
  (setq ns-use-srgb-colorspace nil)
  (setq powerline-default-separator 'slant)
  (spaceline-compile)
  )

(defun configMx ()
  (define-key evil-normal-state-map (kbd "_") 'helm-M-x)
  (define-key spacemacs-buffer-mode-map (kbd "_") 'helm-M-x)
  )

(defun configMagit()
  (define-key evil-normal-state-map (kbd "+") 'magit-status)
  )

(defun configNeotree ()
  (define-key evil-normal-state-map (kbd "To") 'neotree-find-project-root)
  (add-hook
   'neotree-mode-hook
   '(lambda ()
      (local-set-key (kbd "To") 'neotree-find-project-root)
      (local-set-key (kbd "o") 'neotree-enter)
      (local-set-key (kbd "<tab>") 'evil-window-next)
      ))
  )

(defun configBuffer ()
  (define-key evil-normal-state-map (kbd "s-<backspace>") 'helm-resume)
  (define-key evil-normal-state-map (kbd "<tab>") 'evil-window-next)
  (global-set-key (kbd "s-w") 'evil-window-delete)
  (global-set-key (kbd "s-q") 'evil-window-delete)
  )

(defun configProjectile ()
  (define-key evil-normal-state-map (kbd "s-f") 'helm-projectile-find-file)
  (global-set-key (kbd "s-p") 'helm-projectile-switch-project)
  )

(defun configSearch ()
  (define-key evil-normal-state-map (kbd "s-F") 'spacemacs/helm-project-smart-do-search)
  (define-key evil-normal-state-map (kbd "s-P") 'spacemacs/helm-project-smart-do-search)
  )

(defun configHippieExpand ()
  (define-key evil-insert-state-map (kbd "M-<tab>") 'hippie-expand)
  )

(defun configEvilNerdCommenter ()
  (define-key evil-normal-state-map (kbd ",ci") 'evilnc-comment-or-uncomment-lines)
  (define-key evil-visual-state-map (kbd ",ci") 'evilnc-comment-or-uncomment-lines)
  )

(defun configEyebrowse ()
  (global-set-key (kbd "s-1") 'eyebrowse-switch-to-window-config-1)
  (global-set-key (kbd "s-2") 'eyebrowse-switch-to-window-config-2)
  (global-set-key (kbd "s-3") 'eyebrowse-switch-to-window-config-3)
  (global-set-key (kbd "s-4") 'eyebrowse-close-window-config)
  )

(defun configGitGutter ()
  (require 'git-gutter-fringe+)
  (global-git-gutter+-mode)
  )

(defun configMake ()
  (setq helm-make-named-buffer t)
  (add-hook
   'compilation-mode-hook
   '(lambda ()
      (local-set-key (kbd "<tab>") 'evil-window-next)
      ))
  )

(defun initDash ()
  (setq dash-helm-dash-docset-path "~/.docsets")
  )

(defun configDash ()
  (setq helm-dash-browser-func 'eww)
  )

(defun configElm ()
  (setq elm-format-on-save t)
  )

(defun configSass ()
  (add-hook
   'sass-mode-hook
   '(lambda ()
      (define-key evil-normal-state-local-map (kbd "<backspace>") 'evil-backward-char)))
  )

(defun configCrystal ()
  (autoload 'crystal-mode "crystal-mode" "Major mode for crystal files" t)
  (add-to-list 'auto-mode-alist '("\\.cr$" . crystal-mode))
  (add-to-list 'interpreter-mode-alist '("crystal" . crystal-mode))
  )

(defun configShell ()
  (setq sh-basic-offset 2)
  (setq sh-indentation 2)
  (define-key evil-normal-state-map (kbd "!") 'projectile-run-async-shell-command-in-root)
  (define-key evil-normal-state-map (kbd "-")
    '(lambda ()
       (interactive)
       (let (
             (currentbuf (get-buffer-window (current-buffer)))
             (newbuf     (generate-new-buffer-name "*shell*"))
             )
         (generate-new-buffer newbuf)
         (set-window-dedicated-p currentbuf nil)
         (set-window-buffer currentbuf newbuf)
         (shell newbuf)
         )
       ))
  )

(defun configJavaScript ()
  (setq-default js-indent-level 2)
  )

(defun configHtml ()
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  )

(defun configCss ()
  (setq css-indent-offset 2)
  )

(defun configVue ()
  (autoload 'vue-mode "vue-mode" "Major mode for vue files" t)
  (add-to-list 'auto-mode-alist '("\\.vue$" . vue-mode))
  (add-to-list 'interpreter-mode-alist '("vue" . vue-mode))
  (setq mmm-submode-decoration-level 0)
  )

(defun forward-button ()
  (interactive)
  (evil-window-next 1))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   ["#0a0814" "#f2241f" "#67b11d" "#b1951d" "#4f97d7" "#a31db1" "#28def0" "#b2b2b2"])
 '(compilation-message-face (quote default))
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(evil-want-Y-yank-to-eol t)
 '(fci-rule-color "#073642" t)
 '(fringe-mode 6 nil (fringe))
 '(highlight-changes-colors (quote ("#d33682" "#6c71c4")))
 '(highlight-symbol-colors
   (--map
    (solarized-color-blend it "#002b36" 0.25)
    (quote
     ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
 '(highlight-symbol-foreground-color "#93a1a1")
 '(highlight-tail-colors
   (quote
    (("#073642" . 0)
     ("#546E00" . 20)
     ("#00736F" . 30)
     ("#00629D" . 50)
     ("#7B6000" . 60)
     ("#8B2C02" . 70)
     ("#93115C" . 85)
     ("#073642" . 100))))
 '(hl-bg-colors
   (quote
    ("#7B6000" "#8B2C02" "#990A1B" "#93115C" "#3F4D91" "#00629D" "#00736F" "#546E00")))
 '(hl-fg-colors
   (quote
    ("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36")))
 '(magit-diff-use-overlays nil)
 '(nrepl-message-colors
   (quote
    ("#dc322f" "#cb4b16" "#b58900" "#546E00" "#B4C342" "#00629D" "#2aa198" "#d33682" "#6c71c4")))
 '(package-selected-packages
   (quote
    (tide typescript-mode vue-mode ssass-mode vue-html-mode winum fuzzy flycheck-credo sublime-themes ample-theme spacegray-theme ujelly-theme purple-haze-theme jbeans-theme zenburn-theme goto-chg diminish pcache ob-elixir org minitest hide-comnt go-guru seq undo-tree csv-mode rvm ruby-tools ruby-test-mode rubocop rspec-mode robe rbenv rake bundler inf-ruby uuidgen pug-mode org-projectile org-download livid-mode skewer-mode simple-httpd link-hint git-link flyspell-correct-helm flyspell-correct flycheck-mix evil-visual-mark-mode evil-unimpaired evil-ediff eshell-z dumb-jump column-enforce-mode cargo dash color-theme-sanityinc-solarized powerline spinner log4e gntp json-snatcher json-reformat multiple-cursors parent-mode request haml-mode gitignore-mode fringe-helper git-gutter+ flx iedit highlight tablist docker-tramp web-completion-data s dash-functional deferred pos-tip go-mode yasnippet packed elixir-mode pkg-info epl async popup bind-key bind-map rust-mode projectile auto-complete avy tern f anzu smartparens flycheck company helm helm-core js2-mode markdown-mode alert magit magit-popup git-commit with-editor hydra package-build evil chruby yaml-mode xterm-color ws-butler window-numbering which-key web-mode web-beautify volatile-highlights vi-tilde-fringe use-package toml-mode toc-org tagedit spacemacs-theme spaceline solarized-theme smooth-scrolling smeargle slim-mode shell-pop scss-mode sass-mode ruby-end restart-emacs rainbow-delimiters racer quelpa popwin persp-mode pcre2el paradox page-break-lines orgit org-repo-todo org-present org-pomodoro org-plus-contrib org-bullets open-junk-file neotree multi-term move-text mmm-mode markdown-toc magit-gitflow macrostep lorem-ipsum linum-relative leuven-theme less-css-mode json-mode js2-refactor js-doc jade-mode info+ indent-guide ido-vertical-mode hungry-delete htmlize hl-todo highlight-parentheses highlight-numbers highlight-indentation help-fns+ helm-themes helm-swoop helm-projectile helm-mode-manager helm-make helm-gitignore helm-flyspell helm-flx helm-descbinds helm-dash helm-css-scss helm-company helm-c-yasnippet helm-ag google-translate golden-ratio go-eldoc gnuplot gitconfig-mode gitattributes-mode git-timemachine git-messenger git-gutter-fringe+ gh-md flycheck-rust flycheck-pos-tip flycheck-elm flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-args evil-anzu eval-sexp-fu eshell-prompt-extras esh-help emmet-mode elm-mode elisp-slime-nav dockerfile-mode docker define-word dash-at-point company-web company-tern company-statistics company-racer company-quickhelp company-go coffee-mode clean-aindent-mode buffer-move bracketed-paste auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile alchemist aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line ac-ispell)))
 '(pdf-view-midnight-colors (quote ("#DCDCCC" . "#383838")))
 '(pos-tip-background-color "#073642")
 '(pos-tip-foreground-color "#93a1a1")
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
 '(term-default-bg-color "#002b36")
 '(term-default-fg-color "#839496")
 '(vc-annotate-background nil)
 '(vc-annotate-background-mode nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#dc322f")
     (40 . "#c85d17")
     (60 . "#be730b")
     (80 . "#b58900")
     (100 . "#a58e00")
     (120 . "#9d9100")
     (140 . "#959300")
     (160 . "#8d9600")
     (180 . "#859900")
     (200 . "#669b32")
     (220 . "#579d4c")
     (240 . "#489e65")
     (260 . "#399f7e")
     (280 . "#2aa198")
     (300 . "#2898af")
     (320 . "#2793ba")
     (340 . "#268fc6")
     (360 . "#268bd2"))))
 '(vc-annotate-very-old-color nil)
 '(weechat-color-list
   (quote
    (unspecified "#002b36" "#073642" "#990A1B" "#dc322f" "#546E00" "#859900" "#7B6000" "#b58900" "#00629D" "#268bd2" "#93115C" "#d33682" "#00736F" "#2aa198" "#839496" "#657b83")))
 '(xterm-color-names
   ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#eee8d5"])
 '(xterm-color-names-bright
   ["#002b36" "#cb4b16" "#586e75" "#657b83" "#839496" "#6c71c4" "#93a1a1" "#fdf6e3"]))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:foreground "#bdbdb3" :background "gray13"))))
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
