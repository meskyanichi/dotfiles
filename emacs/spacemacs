;; -*- mode: emacs-lisp -*-

(defun dotspacemacs/layers ()
  (setq-default
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-enable-lazy-installation 'unused
   dotspacemacs-ask-for-lazy-installation t
   dotspacemacs-configuration-layer-path '()
   dotspacemacs-configuration-layers
   '(org
     markdown
     helm
     yaml
     shell
     git
     emacs-lisp
     javascript
     (clojure :variables clojure-enable-clj-refactor t)
     ruby
     go
     html
     neotree
     syntax-checking
     auto-completion)
   dotspacemacs-additional-packages
   '(pinentry
     git-gutter-fringe+
     parinfer
     chruby
     crystal-mode
     exec-path-from-shell)
   dotspacemacs-frozen-packages '()
   dotspacemacs-excluded-packages '(linum smartparens yasnippet)))

(defun dotspacemacs/init ()
  (setq-default
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-timeout 5
   dotspacemacs-check-for-update nil
   dotspacemacs-elpa-subdirectory nil
   dotspacemacs-editing-style 'vim
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner 'official
   dotspacemacs-startup-lists '((projects . 10)
                                (recents . 10)
                                (bookmarks . 5))
   dotspacemacs-startup-buffer-responsive t
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-themes '(sanityinc-tomorrow-eighties spacemacs-dark spacemacs-light)
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("SF Mono"
                               :size 14
                               :weight normal
                               :width normal
                               :powerline-scale 1.2)
   dotspacemacs-leader-key "§"
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-ex-command-key ":"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-remap-Y-to-y$ nil
   dotspacemacs-retain-visual-state-on-shift t
   dotspacemacs-visual-line-move-text nil
   dotspacemacs-default-layout-name "Default"
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-large-file-size 1
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-max-rollback-slots 5
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-no-header nil
   dotspacemacs-helm-position 'bottom
   dotspacemacs-helm-use-fuzzy 'always
   dotspacemacs-enable-paste-transient-state nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup t
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-show-transient-state-title t
   dotspacemacs-show-transient-state-color-guide t
   dotspacemacs-mode-line-theme 'spacemacs
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-smooth-scrolling t
   dotspacemacs-line-numbers nil
   dotspacemacs-folding-method 'evil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-smart-closing-parenthesis nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag")
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup 'all))

(defun dotspacemacs/user-config ()
  (config-custom)
  (config-emacs)
  (config-fringe)
  (config-powerline)
  (config-mx)
  (config-magit)
  (config-neotree)
  (config-buffer)
  (config-cursor)
  (config-projectile)
  (config-search)
  (config-hippie-expand)
  (config-evil-nerd-commenter)
  (config-eyebrowse)
  (config-git-gutter)
  (config-make)
  (config-sass)
  (config-shell)
  (config-javascript)
  (config-clojure)
  (config-html)
  (config-css)
  (config-frame)
  (config-window)
  (config-font)
  (config-insert-mode)
  (config-indent)
  (config-alignment)
  (config-mmm-mode)
  (config-parinfer)
  (init-pinentry)
  (init-shell-path)
  (fix-theme-rendering))

(defun config-custom ()
  (setq custom-file "~/.dotfiles/emacs/custom.el")
  (load custom-file))

(defun config-emacs ()
  (add-hook 'emacs-lisp-mode-hook 'parinfer-mode)
  (setq vc-follow-symlinks t))

(defun config-fringe ()
  (setq-default left-fringe-width 15)
  (setq-default right-fringe-width 0))

(defun config-powerline ()
  (setq auto-revert-check-vc-info t)
  (setq ns-use-srgb-colorspace nil)
  (setq powerline-default-separator nil)
  (spaceline-compile))

(defun config-mx ()
  (define-key evil-normal-state-map (kbd "_") 'helm-M-x)
  (define-key spacemacs-buffer-mode-map (kbd "_") 'helm-M-x))

(defun config-magit()
  (define-key evil-normal-state-map (kbd "+") 'magit-status))

(defun config-neotree ()
  (setq neo-theme 'nerd)
  (define-key evil-normal-state-map (kbd "To") 'neotree-find-project-root)
  (add-hook
   'neotree-mode-hook
   '(lambda ()
      (local-set-key (kbd "To") 'neotree-find-project-root)
      (local-set-key (kbd "o") 'neotree-enter)
      (local-set-key (kbd "<tab>") 'evil-window-next))))

(defun config-buffer ()
  (define-key evil-normal-state-map (kbd "s-<backspace>") 'helm-resume)
  (define-key evil-normal-state-map (kbd "<tab>") 'evil-window-next)
  (define-key evil-normal-state-map (kbd "s-b") 'helm-mini)
  (global-set-key (kbd "s-w") 'evil-window-delete)
  (global-set-key (kbd "s-q") 'evil-window-delete))

(defun config-cursor ()
  (indent-guide-global-mode))

(defun config-projectile ()
  (define-key evil-normal-state-map (kbd "s-f") 'helm-projectile-find-file)
  (global-set-key (kbd "s-p") 'helm-projectile-switch-project))

(defun config-search ()
  (define-key evil-normal-state-map (kbd "s-F") 'helm-projectile-ag))

(defun config-hippie-expand ()
  (define-key evil-insert-state-map (kbd "M-<tab>") 'hippie-expand))

(defun config-evil-nerd-commenter ()
  (define-key evil-normal-state-map (kbd ",ci") 'evilnc-comment-or-uncomment-lines)
  (define-key evil-visual-state-map (kbd ",ci") 'evilnc-comment-or-uncomment-lines))

(defun config-eyebrowse ()
  (global-set-key (kbd "s-§") 'eyebrowse-close-window-config)
  (global-set-key (kbd "s-1") 'eyebrowse-switch-to-window-config-1)
  (global-set-key (kbd "s-2") 'eyebrowse-switch-to-window-config-2)
  (global-set-key (kbd "s-3") 'eyebrowse-switch-to-window-config-3)
  (global-set-key (kbd "s-4") 'eyebrowse-switch-to-window-config-4)
  (global-set-key (kbd "s-5") 'eyebrowse-switch-to-window-config-5)
  (global-set-key (kbd "s-6") 'eyebrowse-switch-to-window-config-6))

(defun config-git-gutter ()
  (require 'git-gutter-fringe+)
  (global-git-gutter+-mode))

(defun config-make ()
  (setq helm-make-named-buffer t)
  (add-hook
   'compilation-mode-hook
   '(lambda ()
      (local-set-key (kbd "<tab>") 'evil-window-next))))

(defun config-sass ()
  (add-hook
   'sass-mode-hook
   '(lambda ()
      (define-key evil-normal-state-local-map (kbd "<backspace>") 'evil-backward-char))))

(defun config-shell ()
  (setq sh-basic-offset 2)
  (setq sh-indentation 2)
  (define-key evil-normal-state-map (kbd "!") 'projectile-run-async-shell-command-in-root)
  (define-key evil-normal-state-map (kbd "-")
    '(lambda ()
       (interactive)
       (let ((currentbuf (get-buffer-window (current-buffer)))
             (newbuf     (generate-new-buffer-name "*shell*")))
         (generate-new-buffer newbuf)
         (set-window-dedicated-p currentbuf nil)
         (set-window-buffer currentbuf newbuf)
         (shell newbuf)))))

(defun config-javascript ()
  (setq-default js-indent-level 2))

(defun config-clojure ()
  (setq clojure-enable-linters t)
  (add-hook 'clojure-mode-hook 'parinfer-mode)
  (add-hook 'clojure-mode-hook
    (lambda ()
      (add-hook 'before-save-hook 'cider-format-buffer nil 'local))))

(defun config-html ()
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))

(defun config-css ()
  (setq css-indent-offset 2)
  (setq css-fontify-colors nil))

(defun config-frame ()
  (global-set-key (kbd "<C-s-268632070>") 'toggle-frame-fullscreen))

(defun config-window ()
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-decrease-height)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-increase-height))

(defun config-font ()
  (global-set-key (kbd "s-0") 'spacemacs/reset-font-size)
  (global-set-key (kbd "s-=") 'spacemacs/scale-up-font)
  (global-set-key (kbd "s--") 'spacemacs/scale-down-font))

(defun config-insert-mode ()
  (define-key evil-insert-state-map (kbd "M-@")
    (lambda ()
      (interactive)
      (insert "€"))))

(defun config-indent ()
  (setq go-tab-width 2))

(defun config-alignment ()
  (define-key evil-visual-state-map (kbd "+")
    (lambda (begin end)
      (interactive "r")
      (align-regexp begin end "\\(\\s-*\\)=" 1 1))))

(defun config-mmm-mode ()
  (add-hook 'mmm-mode-hook
    (lambda ()
      (set-face-background 'mmm-default-submode-face nil))))

(defun config-parinfer ()
  (setq parinfer-extensions '(defaults pretty-parens evil smart-yank))
  (setq parinfer-auto-switch-indent-mode t))

(defun init-pinentry ()
  (pinentry-start))

(defun init-shell-path ()
  (exec-path-from-shell-initialize))

(defun fix-theme-rendering ()
  (spacemacs/cycle-spacemacs-theme)
  (spacemacs/cycle-spacemacs-theme-backward))
